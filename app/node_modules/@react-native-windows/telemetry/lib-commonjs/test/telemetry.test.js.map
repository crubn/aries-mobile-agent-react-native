{"version":3,"file":"telemetry.test.js","sourceRoot":"","sources":["../../src/test/telemetry.test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * @format\n */\n\nimport * as appInsights from 'applicationinsights';\nimport * as path from 'path';\n\nimport {\n  Telemetry,\n  CommandStartInfo,\n  CommandEndInfo,\n  CommandEventName,\n  CodedErrorEventName,\n} from '../telemetry';\nimport * as basePropUtils from '../utils/basePropUtils';\nimport * as errorUtils from '../utils/errorUtils';\nimport * as projectUtils from '../utils/projectUtils';\nimport * as versionUtils from '../utils/versionUtils';\n\nexport class TelemetryTest extends Telemetry {\n  protected static hasTestTelemetryProviders: boolean;\n  protected static testTelemetryProvidersRan: boolean;\n\n  /** Run at the beginning of each test. */\n  static async startTest() {\n    TelemetryTest.hasTestTelemetryProviders = false;\n    TelemetryTest.testTelemetryProvidersRan = false;\n\n    jest.setTimeout(10000); // These E2E tests can run longer than the default 5000ms\n\n    if (TelemetryTest.isEnabled()) {\n      Telemetry.reset();\n    }\n\n    // Ensure that we don't actually fire events when testing\n    Telemetry.isTest = true;\n\n    await Telemetry.setup({preserveErrorMessages: true});\n  }\n\n  /** Run at the end of each test where telemetry was fired. */\n  static endTest(finalCallback: () => void): void {\n    Telemetry.client?.flush({\n      callback: (_) => {\n        if (TelemetryTest.hasTestTelemetryProviders) {\n          expect(TelemetryTest.testTelemetryProvidersRan).toBe(true);\n        }\n        finalCallback();\n      },\n    });\n  }\n\n  /** Sets that the telemetry provider has run. */\n  static setTestTelemetryProvidersRan() {\n    TelemetryTest.testTelemetryProvidersRan = true;\n  }\n\n  /** Retrieves the value of a common property.*/\n  static getCommonProperty(key: string): string | undefined {\n    return TelemetryTest.client?.commonProperties[key];\n  }\n\n  /** Retrieves the version of the specified tool/package. */\n  static getVersion(key: string): string | null {\n    return key in TelemetryTest.versionsProp\n      ? TelemetryTest.versionsProp[key]\n      : null;\n  }\n\n  /** Adds a telemetry processor, usually for verifying the envelope. */\n  static addTelemetryProcessor(\n    telemetryProcessor: (\n      envelope: appInsights.Contracts.EnvelopeTelemetry,\n      contextObjects?: {\n        [name: string]: any;\n      },\n    ) => boolean,\n  ): void {\n    TelemetryTest.client?.addTelemetryProcessor(telemetryProcessor);\n    TelemetryTest.hasTestTelemetryProviders = true;\n  }\n}\n\nbeforeEach(async () => {\n  await TelemetryTest.startTest();\n});\n\ntest('setup() verify session id is valid and a common property', async () => {\n  const sessionId = TelemetryTest.getSessionId();\n  expect(sessionId).toBeDefined();\n  expect(sessionId!).toHaveLength(32);\n  expect(sessionId!).toBe(basePropUtils.getSessionId());\n  expect(sessionId!).toBe(TelemetryTest.getCommonProperty('sessionId'));\n});\n\ntest('setup() verify static common property values with async sources', async () => {\n  const props: Record<string, () => Promise<string | undefined>> = {\n    deviceId: basePropUtils.deviceId,\n    deviceLocale: basePropUtils.deviceLocale,\n  };\n\n  for (const key in props) {\n    if (!(key in Object.prototype)) {\n      const value = await props[key]();\n      expect(value).toBeDefined();\n      expect(value).toBe(TelemetryTest.getCommonProperty(key));\n    }\n  }\n});\n\ntest('setup() verify static common property values with sync sources', () => {\n  const props: Record<string, () => string | undefined> = {\n    deviceNumCPUs: () => basePropUtils.deviceNumCPUs().toString(),\n    deviceTotalMemory: () => basePropUtils.deviceTotalMemory().toString(),\n    ciCaptured: () => basePropUtils.captureCI().toString(),\n    ciType: () => basePropUtils.ciType(),\n    isMsftInternal: () => basePropUtils.isMsftInternal().toString(),\n    isTest: () => 'true',\n  };\n\n  for (const key in props) {\n    if (!(key in Object.prototype)) {\n      const value = props[key]();\n      expect(value).toBeDefined();\n      expect(value).toBe(TelemetryTest.getCommonProperty(key));\n    }\n  }\n});\n\ntest('setup() verify other common property values are defined', () => {\n  const props: string[] = ['deviceDiskFreeSpace'];\n\n  for (const key of props) {\n    const value = TelemetryTest.getCommonProperty(key);\n    expect(value).toBeDefined();\n  }\n});\n\ntest('setup() verify tool versions are populated', async () => {\n  const props: Record<string, () => Promise<string | null>> = {\n    node: versionUtils.getNodeVersion,\n    npm: versionUtils.getNpmVersion,\n    yarn: versionUtils.getYarnVersion,\n    VisualStudio: versionUtils.getVisualStudioVersion,\n  };\n\n  for (const key in props) {\n    if (!(key in Object.prototype)) {\n      const value = await props[key]();\n      expect(value).toBe(TelemetryTest.getVersion(key));\n    }\n  }\n});\n\ntest('tryUpdateVersionsProp() returns true for adding a new version', async () => {\n  const name = 'test';\n  const version = '1.0';\n  expect(\n    await TelemetryTest.tryUpdateVersionsProp(name, async () => version),\n  ).toBe(true);\n  expect(TelemetryTest.getVersion(name)).toBe(version);\n});\n\ntest('tryUpdateVersionsProp() returns false for adding an existing version with refresh is false', async () => {\n  const name = 'test';\n  const version = '1.0';\n\n  expect(\n    await TelemetryTest.tryUpdateVersionsProp(name, async () => version),\n  ).toBe(true);\n\n  let getValueCalled = false;\n  expect(\n    await TelemetryTest.tryUpdateVersionsProp(name, async () => {\n      getValueCalled = true;\n      return version;\n    }),\n  ).toBe(false);\n\n  expect(getValueCalled).toBe(false);\n});\n\ntest('tryUpdateVersionsProp() returns true for adding an existing version with refresh is true', async () => {\n  const name = 'test';\n  const version = '1.0';\n\n  expect(\n    await TelemetryTest.tryUpdateVersionsProp(name, async () => version),\n  ).toBe(true);\n\n  let getValueCalled = false;\n  expect(\n    await TelemetryTest.tryUpdateVersionsProp(\n      name,\n      async () => {\n        getValueCalled = true;\n        return version;\n      },\n      true,\n    ),\n  ).toBe(true);\n\n  expect(getValueCalled).toBe(true);\n});\n\n/** Returns the CommandStartInfo for our fake 'test-command'. */\nfunction getTestCommandStartInfo(): CommandStartInfo {\n  return {\n    commandName: 'test-command',\n    args: {\n      testArg1: 'true',\n      testArg2: '10',\n      testArg3: 'testValue',\n    },\n    options: {\n      testArg0: 'unsetArg',\n      testArg1: true,\n      testArg2: 10,\n      testArg3: 'testValue',\n    },\n    defaultOptions: {\n      testArg0: 'unsetArg',\n      testArg1: false,\n      testArg2: 0,\n      testArg3: 'defaultValue',\n    },\n  };\n}\n\n/** Returns the CommandEndInfo for our fake 'test-command'. */\nfunction getTestCommandEndInfo(\n  resultCode: errorUtils.CodedErrorType,\n): CommandEndInfo {\n  return {\n    resultCode,\n  };\n}\n\nfunction getTestCommandProjectInfo(): projectUtils.AppProjectInfo {\n  return {\n    id: projectUtils.getProjectId('test-app-project'),\n    platforms: ['windows'],\n    rnwLang: 'cpp',\n    usesTS: true,\n    usesRNConfig: false,\n    jsEngine: 'Chakra',\n    rnwSource: 'Source',\n    dependencies: [\n      {\n        id: projectUtils.getProjectId('test-module-project'),\n        platforms: ['android', 'windows'],\n        rnwLang: 'cpp',\n      },\n    ],\n  };\n}\n\nfunction getExtraProps(): Record<string, any> {\n  return {\n    extraProp1: true,\n    extraProp2: 1234,\n    extraProp3: 'test',\n    extraProp4: ['test'],\n    extraProp5: {\n      nestedProp1: true,\n      nestedProp2: 1234,\n    },\n  };\n}\n\n/** Asynchronously waits the number in ms. */\nasync function promiseDelay(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\n/** The body of the fake 'test-command' which will throw the provided error. */\nasync function testCommandBody(errorToThrow?: Error): Promise<void> {\n  await promiseDelay(100);\n  if (errorToThrow) {\n    throw errorToThrow;\n  }\n}\n\n/** Runs the complete 'test-command' with the right Telemetry setup and cleanup. */\nasync function runTestCommandE2E(commandBody: () => Promise<void>) {\n  TelemetryTest.startCommand(getTestCommandStartInfo());\n  TelemetryTest.setProjectInfo(getTestCommandProjectInfo());\n  let errorCode: errorUtils.CodedErrorType = 'Success';\n  let caughtError: Error | undefined;\n  try {\n    await commandBody();\n  } catch (ex) {\n    caughtError = ex instanceof Error ? (ex as Error) : new Error(String(ex));\n    errorCode =\n      caughtError instanceof errorUtils.CodedError\n        ? (caughtError as errorUtils.CodedError).type\n        : 'Unknown';\n    TelemetryTest.trackException(caughtError);\n  }\n  TelemetryTest.endCommand(getTestCommandEndInfo(errorCode), getExtraProps());\n}\n\n/** Verifys the contents of events fired during the 'test-command'. */\nfunction verifyTestCommandTelemetryProcessor(\n  caughtErrors: Error[],\n  expectedResultCode?: errorUtils.CodedErrorType,\n  expectedError?: Error,\n): (\n  envelope: appInsights.Contracts.EnvelopeTelemetry,\n  contextObjects?: {\n    [name: string]: any;\n  },\n) => boolean {\n  return (envelope, _) => {\n    try {\n      // Processor has run, so the test can (potentially) pass\n      TelemetryTest.setTestTelemetryProvidersRan();\n\n      // Verify roleInstance has been removed\n      expect(envelope.tags['ai.cloud.roleInstance']).toBeUndefined();\n\n      const properties = envelope.data.baseData?.properties;\n      expect(properties).toBeDefined();\n\n      // Verify basics\n      expect(properties.commandName).toBe('test-command');\n\n      // Verify versions info\n      const versions = JSON.parse(properties.versions);\n      expect(versions).toBeDefined();\n\n      // Verify project info\n      const project = JSON.parse(properties.project);\n      expect(project).toStrictEqual(getTestCommandProjectInfo());\n\n      expect(Object.keys(versions).length).toBeGreaterThan(0);\n      for (const key of Object.keys(versions)) {\n        expect(versions[key]).toBe(TelemetryTest.getVersion(key));\n      }\n\n      if (envelope.data.baseType === 'ExceptionData') {\n        // Verify event name\n        expect(properties.eventName).toBe(CodedErrorEventName);\n\n        // Verify coded error info\n        const codedError = JSON.parse(properties.codedError);\n        expect(codedError).toBeDefined();\n\n        expect(codedError.type).toBe(\n          expectedError instanceof errorUtils.CodedError\n            ? expectedError.type\n            : 'Unknown',\n        );\n        expect(codedError.rawErrorCode).toBe(\n          errorUtils.tryGetErrorCode(expectedError?.message ?? '') ?? '',\n        );\n        expect(codedError.data).toStrictEqual(\n          (expectedError as errorUtils.CodedError).data ?? {},\n        );\n      } else {\n        // Verify event name\n        expect(envelope.data.baseData?.name).toBe(CommandEventName);\n        expect(properties.eventName).toBe(CommandEventName);\n\n        // Verify command info\n        const expectedInfo = getTestCommandStartInfo();\n\n        const command = JSON.parse(properties.command);\n        expect(command).toBeDefined();\n        expect(command.args).toStrictEqual(expectedInfo.args);\n        expect(command.options).toStrictEqual(expectedInfo.options);\n        expect(command.defaultOptions).toStrictEqual(\n          expectedInfo.defaultOptions,\n        );\n        expect(command.durationInSecs).toBeGreaterThan(0);\n        expect(command.resultCode).toBe(expectedResultCode ?? 'Success');\n\n        // Verify extra props\n        const extraProps = getExtraProps();\n        for (const key of Object.keys(extraProps)) {\n          switch (typeof extraProps[key]) {\n            case 'object':\n              expect(JSON.parse(properties[key])).toStrictEqual(\n                extraProps[key],\n              );\n              break;\n            default:\n              expect(properties[key]).toBe(extraProps[key].toString());\n          }\n        }\n      }\n    } catch (ex) {\n      caughtErrors.push(\n        ex instanceof Error ? (ex as Error) : new Error(String(ex)),\n      );\n    }\n\n    return true;\n  };\n}\n\ntest('Telemetry run test command end to end, verify event fires', async (done) => {\n  // AI eats errors thrown in telemetry processors\n  const caughtErrors: Error[] = [];\n  TelemetryTest.addTelemetryProcessor(\n    verifyTestCommandTelemetryProcessor(caughtErrors),\n  );\n\n  await runTestCommandE2E(testCommandBody);\n\n  TelemetryTest.endTest(() => {\n    // Check if any errors were thrown\n    expect(caughtErrors).toHaveLength(0);\n    done();\n  });\n});\n\ntest('Telemetry run test command end to end with CodedError, verify events fire', async (done) => {\n  const expectedError = new errorUtils.CodedError('MSBuildError', 'test error');\n\n  // AI eats errors thrown in telemetry processors\n  const caughtErrors: Error[] = [];\n  TelemetryTest.addTelemetryProcessor(\n    verifyTestCommandTelemetryProcessor(\n      caughtErrors,\n      expectedError.type,\n      expectedError,\n    ),\n  );\n\n  await runTestCommandE2E(() => testCommandBody(expectedError));\n\n  TelemetryTest.endTest(() => {\n    // Check if any errors were thrown\n    expect(caughtErrors).toHaveLength(0);\n    done();\n  });\n});\n\ntest('Telemetry run test command end to end with CodedError (with error in message), verify events fire', async (done) => {\n  const expectedError = new errorUtils.CodedError(\n    'MSBuildError',\n    'error FOO2020: test error',\n  );\n\n  // AI eats errors thrown in telemetry processors\n  const caughtErrors: Error[] = [];\n  TelemetryTest.addTelemetryProcessor(\n    verifyTestCommandTelemetryProcessor(\n      caughtErrors,\n      expectedError.type,\n      expectedError,\n    ),\n  );\n\n  await runTestCommandE2E(() => testCommandBody(expectedError));\n\n  TelemetryTest.endTest(() => {\n    // Check if any errors were thrown\n    expect(caughtErrors).toHaveLength(0);\n    done();\n  });\n});\n\ntest('Telemetry run test command end to end with CodedError (with data), verify events fire', async (done) => {\n  const expectedError = new errorUtils.CodedError(\n    'MSBuildError',\n    'test error',\n    {foo: 42},\n  );\n\n  // AI eats errors thrown in telemetry processors\n  const caughtErrors: Error[] = [];\n  TelemetryTest.addTelemetryProcessor(\n    verifyTestCommandTelemetryProcessor(\n      caughtErrors,\n      expectedError.type,\n      expectedError,\n    ),\n  );\n\n  await runTestCommandE2E(() => testCommandBody(expectedError));\n\n  TelemetryTest.endTest(() => {\n    // Check if any errors were thrown\n    expect(caughtErrors).toHaveLength(0);\n    done();\n  });\n});\n\ntest('Telemetry run test command end to end with Error, verify events fire', async (done) => {\n  const expectedError = new Error('error FOO2020: test error');\n\n  // AI eats errors thrown in telemetry processors\n  const caughtErrors: Error[] = [];\n  TelemetryTest.addTelemetryProcessor(\n    verifyTestCommandTelemetryProcessor(caughtErrors, 'Unknown', expectedError),\n  );\n\n  await runTestCommandE2E(() => testCommandBody(expectedError));\n\n  TelemetryTest.endTest(() => {\n    // Check if any errors were thrown\n    expect(caughtErrors).toHaveLength(0);\n    done();\n  });\n});\n\ntest('Telemetry run test command end to end with Error (no message), verify events fire', async (done) => {\n  const expectedError = new Error();\n\n  // AI eats errors thrown in telemetry processors\n  const caughtErrors: Error[] = [];\n  TelemetryTest.addTelemetryProcessor(\n    verifyTestCommandTelemetryProcessor(caughtErrors, 'Unknown', expectedError),\n  );\n\n  await runTestCommandE2E(() => testCommandBody(expectedError));\n\n  TelemetryTest.endTest(() => {\n    // Check if any errors were thrown\n    expect(caughtErrors).toHaveLength(0);\n    done();\n  });\n});\n\nfunction b(s: string) {\n  throw new Error('hello ' + s);\n}\n\nfunction a(s: string) {\n  b(s);\n}\n\n/** Verifies the contents of an exception's message and stack frames */\nfunction getVerifyStackTelemetryProcessor(\n  caughtErrors: Error[],\n  expectedError: Error,\n): (\n  envelope: appInsights.Contracts.EnvelopeTelemetry,\n  contextObjects?: {\n    [name: string]: any;\n  },\n) => boolean {\n  return (envelope, _) => {\n    try {\n      // Processor has run, so the test can (potentially) pass\n      TelemetryTest.setTestTelemetryProvidersRan();\n\n      if (envelope.data.baseType === 'ExceptionData') {\n        const data = (envelope.data as any).baseData;\n        expect(data.exceptions).toBeDefined();\n        expect(data.exceptions.length).toBe(1);\n        expect(data.exceptions[0].message).toBe(\n          errorUtils.sanitizeErrorMessage(expectedError.message),\n        );\n\n        const stack = data.exceptions[0].parsedStack;\n        expect(stack).toBeDefined();\n        expect(stack.length).toBeGreaterThan(2);\n\n        const filename = path.relative(process.cwd(), __filename);\n        expect(stack[0].method).toEqual('b');\n        expect(stack[1].method).toEqual('a');\n        expect(stack[0].fileName).toEqual(\n          `[project_dir]\\\\???.ts(${filename.length})`,\n        );\n        expect(stack[1].fileName).toEqual(\n          `[project_dir]\\\\???.ts(${filename.length})`,\n        );\n      }\n    } catch (ex) {\n      caughtErrors.push(\n        ex instanceof Error ? (ex as Error) : new Error(String(ex)),\n      );\n    }\n\n    return true;\n  };\n}\n\ntest('Telemetry run test command end to end with Error, verify sanitized message and stack', async (done) => {\n  const expectedError = new Error('hello world');\n\n  // AI eats errors thrown in telemetry processors\n  const caughtErrors: Error[] = [];\n  TelemetryTest.addTelemetryProcessor(\n    getVerifyStackTelemetryProcessor(caughtErrors, expectedError),\n  );\n\n  await runTestCommandE2E(async () => {\n    await promiseDelay(100);\n    a('world');\n  });\n\n  TelemetryTest.endTest(() => {\n    // Check if any errors were thrown\n    expect(caughtErrors).toHaveLength(0);\n    done();\n  });\n});\n\ntest('Telemetry run test command end to end with Error, verify sanitized message with path and stack', async (done) => {\n  const expectedError = new Error(`hello ${process.cwd()}`);\n\n  // AI eats errors thrown in telemetry processors\n  const caughtErrors: Error[] = [];\n  TelemetryTest.addTelemetryProcessor(\n    getVerifyStackTelemetryProcessor(caughtErrors, expectedError),\n  );\n\n  await runTestCommandE2E(async () => {\n    await promiseDelay(100);\n    a(process.cwd());\n  });\n\n  TelemetryTest.endTest(() => {\n    // Check if any errors were thrown\n    expect(caughtErrors).toHaveLength(0);\n    done();\n  });\n});\n"]}